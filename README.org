* SSH Related Policy

** inventory_ssh_host_key_fingerprints
This policy will inventory ssh host key fingerprints that are found on the
system.

SSH Host key fingerprints are derived from files ending in `.pub` located in
`/etc/ssh`.

[[images/inventory_ssh_host_key_fingerprint_dsa.jpg]]
** manage_sshd_config
Mange the sshd config file.

*NOTE:* This bundle is opinionated and promises that sshd will be re-started if
the configuration is changed. This means that if sshd is not running, but its
configuration is changed, it will be started. This restart behavior can be
disabled by defining the class =_sshd_config_norestart=

*** Parameters
- =config_file= :: Full path to the =sshd_config= file (e.g.
     =/etc/ssh/sshd_config=).

- =template_file= :: Full path to the mustache template. See
     [[file:templates/sshd_config.mustache]].

- =config_data= :: A data structure that maps to =sshd_config=. See
     [[file:./data/sshd_config_defaults.json]].

***  Example Usage

This example shows how defaults can be overridden.

#+BEGIN_SRC cfengine3
  bundle agent main
  {
          "defaults"
            data => readjson("$(this.promise_dirname)/../data/sshd_example.json", inf),
            comment => "The baseline settings for all sshd configs. These defaults
                        may be overridden with service specific configs below.";

          # NOTE: It would be possible to have mandatory settings by merging those
          # last.

          "config" data => mergedata(
                                      @(defaults),
                                      "@(def.sshd_config[data])",
                                    );

          # Should this be user configurable? Well it makes it easier to test. I
          # could take the value from def, then it is overrideable easily in
          # def.json which could also work for testing.

          "c"
            string => "$(this.promise_dirname)/../sshdconfig.txt",
            comment => "The sshd configuration file to manage.";

      methods:

          "Manage SSHD" -> { "support_upload", "support@cfengine.com" }
            usebundle => manage_sshd_config( "$(c)", "$(this.promise_dirname)/../templates/sshd.mustache", @(config) ),
            inherit => "true";
  }
#+END_SRC

# You can easily define data via the augments file and pick it out:
# mergedata with "@(def.sshd_config[data])"
#+begin_src json
#      {
#        "vars":{
#                 "sshd_config": {
#                                  "data": {
#                                            "Port": 7777
#                                  }
#                 }
#        }
#      }
#+end_src




** inventory_duplicate_ssh_host_key_fingerprints
This policy relies on inventory_ssh_host_key_fingerprints being
active. This policy is designed to run on a CFEngine Enterprise Hub.

[[images/inventory_duplicate_ssh_host_key_fingerprint_dsa.jpg]]

*** inventory_duplicate_ssh_host_key_fingerprints_data

This policy will generate duplicate host key data that will be used for
inventory and alerting.

*** inventory_duplicate_ssh_host_key_fingerprints_report

This policy uses the data generated by
inventory_duplicate_ssh_host_key_fingerprints_data to inventory hosts found to
have duplicate keys.

*** Saved seports showing duplicate hosts
For each type of ssh host key in your infrastrucutre (DSA, RSA, RSA1, etc ...)
you may want to create a saved report for quick access.

Here is an example of a SQL query to show duplicate DSA keys.

#+begin_src sql
SELECT sub.value as "SSH Host Fingerprint (DSA)",
        sub.hostkeys as "Host Identity"
FROM (SELECT variablevalue as value,
          array_agg(hostkey) as hostkeys,
          count(*)
     FROM variables
     WHERE 'attribute_name=SSH Host Fingerprint (DSA)' = ANY(metatags) group by variablevalue )
     AS sub where sub.count > 1 order by sub.count desc
#+end_src

[[images/inventory_duplicate_ssh_host_key_fingerprints_saved_report.jpg]]

*** Alerts
You can setup alerts based on the inventoried duplicate ssh host keys.

[[images/dashboard_widget_duplicate_ssh_host_key.jpg]]

1) Create a new widget named "Duplicate SSH Host Key"
   [[images/inventory_duplicate_ssh_host_key_fingerprints_create_dashboard_widget.jpg]]

2) Create a new alert named "Duplicate DSA SSH Host Key" and set the severity appropirately for your environment.
   [[images/inventory_duplicate_ssh_host_key_fingerprints_create_alert.jpg]]

3) Create a new condition named "Duplicate DSA SSH Host Key"
   a) Set the condition type to "Inventory"
   b) Select the "Duplicate SSH Host Keys (DSA)" attribute
   c) Set the match to "contains" (because its a list) with "%" as the value (to match anything)

   [[images/inventory_duplicate_ssh_host_key_fingerprints_create_condition.jpg]]

** How to integrate into your policy
First get the policy into your masterfiles

#+begin_src sh
  cd /tmp
  export MASTERFILES=/var/cfengine/masterfiles
  git clone https://github.com/nickanderson/cfengine-ssh.git
  cd cfengine-ssh
  mkdir -p $MASTERFILES/services/ssh
  git archive master | tar -x -C $MASTERFILES/services/ssh
#+end_src

Include def.cf into your inputs

#+begin_src cfengine
  body common control
  {
        inputs => { 
                    # Reports
                    @(cfengine_reports.inputs),
  
                   "services/ssh/def.cf",
                    
                    # autorun system
                    @(services_autorun.inputs),
        };
  }
#+end_src

Activate the features you want in the proper context.

For example to activate `inventory_ssh_host_key_fingerprints` on all non
windows servers and to enable `inventory_duplicate_ssh_host_key_fingerprints` on an Enterprise hub:

#+begin_src cfengine
  bundle agent main
  # User Defined Service Catalogue
  {
    methods:
      # Activate your custom policies here
      !windows::
        "Inventory SSH Host Key Fingerprints" -> { "security" }
          usebundle => inventory_ssh_host_key_fingerprints;

      enterprise_edition.policy_server::
        "Inventory Duplicate SSH Host Key Fingerprints"
          usebundle => inventory_duplicate_ssh_host_key_fingerprints;
  }
#+end_src

